The PUT and PATCH methods are both HTTP methods used to update resources on a server, typically in a RESTful API context. However, they have different semantics and are used in different scenarios:

PUT:

The PUT method is used to update or replace an entire resource at a specific URI.
When a client sends a PUT request to the server, it typically includes the full representation of the resource in the request body.
The server then replaces the resource at the specified URI with the new representation provided in the request body.
If the resource does not exist at the specified URI, the server may create a new resource with that URI.
In summary, PUT is idempotent, meaning that performing the same PUT request multiple times has the same effect as performing it once.
PATCH:

The PATCH method is used to partially update a resource at a specific URI.
When a client sends a PATCH request to the server, it typically includes only the changes to be applied to the resource, rather than the full representation.
The server then applies the provided changes to the resource while leaving the rest of the resource unchanged.
If the resource does not exist at the specified URI, the server may create a new resource with that URI.
In contrast to PUT, PATCH is not necessarily idempotent. Performing the same PATCH request multiple times may result in different outcomes, depending on the initial state of the resource and the nature of the changes applied.
In summary, PUT is used for full updates, where the client sends the entire updated representation of the resource, while PATCH is used for partial updates, where the client sends only the changes to be applied to the resource. Both methods are used for updating resources, but they have different semantics and are suitable for different scenarios.

# Rules of hooks ü™ù

Only Call Hooks at the Top Level
Don‚Äôt call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That‚Äôs what allows React to correctly preserve the state of Hooks between multiple useState and useEffect calls. (If you‚Äôre curious, we‚Äôll explain this in depth below.)

Only Call Hooks from React Functions
Don‚Äôt call Hooks from regular JavaScript functions. Instead, you can:

‚úÖ Call Hooks from React function components.
‚úÖ Call Hooks from custom Hooks (we‚Äôll learn about them on the next page).
By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.

useAxiosFetch:

This code snippet defines a custom React hook called useAxiosFetch, which encapsulates data fetching functionality using the Axios library. Let's break down how the hook works:

useState:

The hook initializes three state variables using the useState hook:
data: Stores the fetched data from the API endpoint.
fetchError: Stores any error that occurs during the data fetching process.
isLoading: Tracks the loading state of the data fetching process.
useEffect:

The hook uses the useEffect hook to perform side effects, such as fetching data from the API.
It takes the dataUrl as a dependency, so whenever the dataUrl changes, the effect is re-executed.
Inside the effect, it initializes a variable isMounted to track whether the component is still mounted.
It creates a cancel token using Axios to handle cancellation of requests if the component is unmounted before the request completes.
fetchData Function:

The fetchData function is defined within the effect and is responsible for fetching data from the specified URL.
It sets isLoading to true to indicate that data fetching is in progress.
It makes an HTTP GET request to the dataUrl using Axios.
If the request is successful, it updates the data state with the response data and clears any previous fetch errors.
If an error occurs during the request, it updates the fetchError state with the error message and resets the data state.
Finally, it sets isLoading to false to indicate that data fetching is complete.
Cleanup Function:

The effect returns a cleanup function that runs when the component unmounts.
This function sets the isMounted variable to false to indicate that the component is no longer mounted.
It also cancels the Axios request using the cancel token to prevent memory leaks.
Return Statement:

The hook returns an object containing the data, fetchError, and isLoading states, which can be accessed by components using the hook.
Overall, this custom hook provides a reusable way to fetch data from an API endpoint using Axios while handling loading states and errors gracefully. It also ensures that requests are canceled when the component is unmounted to prevent potential memory leaks.
